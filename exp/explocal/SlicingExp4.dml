# experiment 4 measures the execution time of the incremental slice line algorithm 
# for 10 iterations with increasingly large input feature matrices 
# while keeping the proportion of addedX/totalX the same over all iterations
# the execution is also measured for the slicefinder algorithm for the same input matrices (see SlicingExp2b.dml)

X = read($1);
e = read($2);
sigma = $3;
iteration = $4;
pruningStrat = $5;


str = ""
if(pruningStrat == 5){
    str="AllDisabled"
}else if (pruningStrat == 0){
    str="NoneDisabled"
}else if (pruningStrat == 1){
    str="OnlyScore"
}else if (pruningStrat == 2){
    str="OnlySlice"
}else if (pruningStrat == 3){
    str="OnlyMaxScore"
}

X = X[, 1:8];

numOfPoints = 10;
nrows = matrix(0, numOfPoints, 1);

proportion = 0;
propStr = 0;

propVal = $6;

if(propVal == 1){
    proportion = 0.0005;
    propStr = 1;
}

if(propVal == 2){
    proportion = 0.1;
    propStr = 10;
}

if(propVal == 3){
    proportion = 0.5;
    propStr = 50;
}

decrease = 1 - proportion;
nTotalRows = nrow(X) * (decrease^(numOfPoints*(10-iteration)));
totalDataPoints = 100;  # 10 iterations * 10 datapoints
nrows = matrix(0, numOfPoints, 1);

# Set up the log scale from 15 to nrow(X) over 100 points
minRows = 1000;
maxRows = nrow(X);
logScale = matrix(0, totalDataPoints, 1);
for(i in 1:totalDataPoints) {
    logScale[i,1] = exp(log(minRows) + (i-1) * (log(maxRows) - log(minRows)) / (totalDataPoints-1));
}

# Get the starting index for this iteration
startIndex = (iteration - 1) * numOfPoints + 1;


oldX = X[1:floor(nTotalRows * (decrease^numOfPoints)) ,  ]
oldE = e[1:floor(nTotalRows * (decrease^numOfPoints)) ,] 


nrows = matrix(0, numOfPoints, 1);
for(i in 1:numOfPoints) {
    nrows[i, 1] = floor(logScale[startIndex + i - 1, 1]);
}

write(nrows, "results/Experiment4_nrows_Prop"+ propStr + "_" +iteration+".dat", format="csv")

for( i in 1: numOfPoints){
    # Total rows for this iteration and data point
    totalRows = floor(as.scalar(logScale[startIndex + i - 1, 1]));
    
    # Compute oldX and addedX based on the decrease factor
    oldXRows = floor(totalRows * decrease);
    addedXRows = floor(totalRows - oldXRows);

    oldX = X[1:oldXRows,  ];
    oldE = e[1:oldXRows,  ];

    addedX = X[(oldXRows + 1):(oldXRows + addedXRows),  ];
    addedE = e[(oldXRows + 1):(oldXRows + addedXRows),  ];

    [TK, TKC, D, L, meta, Stats, Xout, eOut, foffb, foffe, params] = incSliceLine(addedX=oldX, addedE=oldE, k=10,
    alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, encodeLat=FALSE);

    [TK1, TKC1, D1, L1, meta1, Stats1, Xout1, eOut1, foffb1, foffe1, params1] = incSliceLine(addedX=addedX, oldX = oldX, oldE = oldE, addedE=addedE, prevLattice = L, metaPrevLattice=meta, prevStats = Stats, prevTK = TK, prevTKC = TKC, k=10,
        alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, params=params, prevFoffb = foffb, prevFoffe = foffe, encodeLat = FALSE,  pruningStrat = pruningStrat);

    timeTaken = 0;
    for(j in 1:10) {
        start = time();
        [TK1, TKC1, D1, L1, meta1, Stats1, Xout1, eOut1, foffb1, foffe1, params1] = incSliceLine(addedX=addedX, oldX = oldX, oldE = oldE, addedE=addedE, prevLattice = L, metaPrevLattice=meta, prevStats = Stats, prevTK = TK, prevTKC = TKC, k=10,
            alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, params=params, prevFoffb = foffb, prevFoffe = foffe, encodeLat = FALSE, pruningStrat = pruningStrat);
        end = time()

        timeTaken = timeTaken + ((end - start) / 1000000);
    }

    timeTaken = timeTaken / 10;

    write(timeTaken, "results/Experiment4_times_"+ str + "_Prop"+ propStr + "_" +(numOfPoints*iteration +i)+ ".dat", format="csv")
}
