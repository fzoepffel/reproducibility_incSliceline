# experiment 2 measures the execution time of the incremental slice line algorithm 
# for 10 iterations with increasingly large input feature matrices 
# while keeping the proportion of addedX/totalX the same over all iterations
# the execution is also measured for the slicefinder algorithm for the same input matrices (see SlicingExp2b.dml)

X = read($1);
e = read($2);

X = X[, 1:8];

n = ceil(nrow(X)/100);

nrows = matrix(0, 11, 1);

nTotalRows = nrow(X);
proportion = 0.03;
decrease = 1 - proportion;

oldX = X[1:floor(nTotalRows * (decrease^10)) ,  ]
oldE = e[1:floor(nTotalRows * (decrease^10)) ,] 

nrows[1,1] = nrow(oldX)

for(i in 1:11) {
  nrows[i, 1] = floor(nTotalRows * (decrease^(11-i)))
}

write(nrows, "results/Experiment2_nrows.dat", format="csv")

sigma = $3;
timeTaken = 0;
for(j in 1: 10){
  start = time();
  [TK, TKC, D, L, meta, Stats, Xout, eOut, foffb, foffe, params] = incSliceLine(addedX=oldX, addedE=oldE, k=10,
    alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, encodeLat = FALSE);
  end = time()
  timeTaken = timeTaken + (((end-start) / 1000000 -1500))

}
timeTaken = timeTaken / 10;
write(timeTaken, "results/Experiment2_times1.dat", format="csv")

for( i in 1: 10){
  addedX = X[floor(nTotalRows * (decrease ^ (11 -i))) +1 : floor(nTotalRows * (decrease ^ (10 -i))),  ]
  addedE = e[floor(nTotalRows * (decrease ^ (11 -i))) +1 : floor(nTotalRows * (decrease ^ (10 -i))), ]
  oldX = X[1:floor(nTotalRows * (decrease ^ (11 -i))) ,  ]
  oldE = e[1:floor(nTotalRows * (decrease ^ (11 -i))) ,]
  timeTaken = 0;
  for(j in 1: 10){
    start = time();
    [TK, TKC, D, L, meta, Stats, Xout, eOut, foffb, foffe, params] = incSliceLine(addedX=addedX, oldX = oldX, oldE = oldE, addedE=addedE, prevLattice = L, metaPrevLattice=meta, prevStats = Stats, prevTK = TK, prevTKC = TKC, k=10,
      alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, params=params, prevFoffb = foffb, prevFoffe = foffe, encodeLat = FALSE);
    end = time()

    timeTaken =timeTaken + (((end-start) / 1000000 - 1500))
  }

  timeTaken = timeTaken / 10;

  write(timeTaken, "results/Experiment2_times" +(i+1)+ ".dat", format="csv")
}
