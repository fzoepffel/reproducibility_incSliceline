# experiment 2 measures the execution time of the incremental slice line algorithm 
# for 10 iterations with increasingly large input feature matrices 
# while keeping the proportion of addedX/totalX the same over all iterations
# the execution is also measured for the slicefinder algorithm for the same input matrices (see SlicingExp2b.dml)

X = read($1);
e = read($2);
sigma = $3;
iteration = $4;

X = X[, 1:8];

numOfPoints = 10;
nrows = matrix(0, numOfPoints, 1);

proportion = 0.03;
decrease = 1 - proportion;
nTotalRows = nrow(X) * (decrease^(numOfPoints*(10-iteration)));

oldX = X[1:floor(nTotalRows * (decrease^numOfPoints)) ,  ]
oldE = e[1:floor(nTotalRows * (decrease^numOfPoints)) ,] 

for(i in 1:(numOfPoints)) {
  nrows[i, 1] = floor(nTotalRows * (decrease^(numOfPoints-i)))
}

write(nrows, "results/Experiment2_nrows"+iteration+".dat", format="csv")

[TK1, TKC1, D1, L1, meta1, Stats1, Xout1, eOut1, foffb1, foffe1, params1] = incSliceLine(addedX=oldX, addedE=oldE, k=10,
  alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, encodeLat = FALSE);

for( i in 1: numOfPoints){
  addedX = X[floor(nTotalRows * (decrease ^ ((numOfPoints +1) -i))) +1 : floor(nTotalRows * (decrease ^ (numOfPoints -i))),  ]
  addedE = e[floor(nTotalRows * (decrease ^ ((numOfPoints +1) -i))) +1 : floor(nTotalRows * (decrease ^ (numOfPoints -i))), ]
  oldX = X[1:floor(nTotalRows * (decrease ^ ((numOfPoints +1) -i))) ,  ]
  oldE = e[1:floor(nTotalRows * (decrease ^ ((numOfPoints +1) -i))) ,]

  TK = TK1;
  TKC= TKC1;
  L = L1;
  meta = meta1;
  Stats = Stats1;
  foffb = foffb1;
  foffe = foffe1;
  params = params1;

  # run once to warm up the system
  [TK1, TKC1, D1, L1, meta1, Stats1, Xout1, eOut1, foffb1, foffe1, params1] = incSliceLine(addedX=addedX, oldX = oldX, oldE = oldE, addedE=addedE, prevLattice = L, metaPrevLattice=meta, prevStats = Stats, prevTK = TK, prevTKC = TKC, k=10,
      alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, params=params, prevFoffb = foffb, prevFoffe = foffe, encodeLat = FALSE);

  timeTaken = 0;
  for(j in 1: 10){
    start = time();
    [TK1, TKC1, D1, L1, meta1, Stats1, Xout1, eOut1, foffb1, foffe1, params1] = incSliceLine(addedX=addedX, oldX = oldX, oldE = oldE, addedE=addedE, prevLattice = L, metaPrevLattice=meta, prevStats = Stats, prevTK = TK, prevTKC = TKC, k=10,
      alpha=0.95, minSup=sigma, tpBlksz=16, verbose=TRUE, params=params, prevFoffb = foffb, prevFoffe = foffe, encodeLat = FALSE);
    end = time()

    timeTaken =timeTaken + (((end-start) / 1000000 ))
  }

  timeTaken = timeTaken / 10;

  write(timeTaken, "results/Experiment2_times" +(numOfPoints*iteration +i)+ ".dat", format="csv")
}
